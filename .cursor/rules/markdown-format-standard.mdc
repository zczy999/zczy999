---
description: 
globs: *.md
alwaysApply: false
---
# Markdown格式标准规范

此规则适用于工作区中的所有Markdown文件(*.md)，确保它们遵循标准格式和最佳实践。

## 标题格式规范

### 标题层级
- 使用 `#` 表示一级标题，每个文档只能有一个一级标题
- 使用 `##` 表示二级标题，`###` 表示三级标题，依此类推
- 标题层级不能跳跃，如不能从 `#` 直接跳到 `###`
- 标题前后必须有空行分隔

```markdown
# 一级标题

## 二级标题

### 三级标题
```

### 标题命名规范
- 标题应该简洁明了，准确描述内容
- 避免使用特殊字符，推荐使用中文或英文
- 同一文档内不应有重复的标题名称

## 列表格式规范

### 无序列表
- 使用 `-` 或 `*` 作为无序列表标记，保持一致性
- 列表项之间保持适当间距
- 嵌套列表使用2个空格缩进

```markdown
- 第一项
- 第二项
  - 嵌套项1
  - 嵌套项2
- 第三项
```

### 有序列表
- 使用数字加点 `1.` 的格式
- 数字序列应该连续
- 同样遵循2个空格缩进规则

```markdown
1. 第一步
2. 第二步
   1. 子步骤1
   2. 子步骤2
3. 第三步
```

## 代码块格式规范

### 行内代码
- 使用反引号 `` ` `` 包围行内代码
- 代码前后不要有空格

```markdown
使用 `console.log()` 输出信息
```

### 代码块
- 使用三个反引号 ``` 包围代码块
- 必须指定语言类型以启用语法高亮
- 代码块前后必须有空行

```markdown
```javascript
function hello() {
    console.log("Hello World!");
}
```
```

### 支持的语言标识符
常用语言标识符包括：
- `javascript` / `js`
- `typescript` / `ts`
- `python` / `py`
- `java`
- `cpp` / `c++`
- `css`
- `html`
- `json`
- `yaml` / `yml`
- `bash` / `shell`

## 链接和图片格式规范

### 链接格式
- 使用 `[链接文本](mdc:URL)` 格式
- 链接文本应该有意义，避免使用"点击这里"等通用文本
- 外部链接建议在新窗口打开

```markdown
[GitHub官网](mdc:https:/github.com)
```

### 图片格式
- 使用 `![alt文本](mdc:图片路径)` 格式
- 必须提供有意义的alt文本
- 本地图片路径使用相对路径

```markdown
![项目架构图](mdc:images/architecture.png)
```

## 表格格式规范

### 基本表格
- 使用管道符 `|` 分隔列
- 第二行使用 `---` 定义表格结构
- 表格前后必须有空行

```markdown
| 列名1 | 列名2 | 列名3 |
|-------|-------|-------|
| 数据1 | 数据2 | 数据3 |
| 数据4 | 数据5 | 数据6 |
```

### 表格对齐
- 左对齐：`|:------|`
- 右对齐：`|------:|`
- 居中对齐：`|:-----:|`

## 引用格式规范

### 块引用
- 使用 `>` 标记引用内容
- 多层引用使用多个 `>`
- 引用前后保持空行

```markdown
> 这是一个引用示例
> 可以跨越多行

>> 这是嵌套引用
```

## 强调格式规范

### 粗体和斜体
- 粗体使用 `**文本**` 或 `__文本__`
- 斜体使用 `*文本*` 或 `_文本_`
- 粗斜体使用 `***文本***`

```markdown
**粗体文本**
*斜体文本*
***粗斜体文本***
```

### 删除线
- 使用 `~~文本~~` 表示删除线

```markdown
~~已删除的内容~~
```

## 分隔线规范

- 使用三个或更多连字符 `---` 创建分隔线
- 分隔线前后必须有空行

```markdown
上方内容

---

下方内容
```

## 文件组织规范

### 目录结构要求
- **根目录文件**：只有 `README.md` 可以放在项目根目录
- **文档目录**：除 `README.md` 外，所有其他 `.md` 文件必须放在 `doc/` 目录下
- **子目录组织**：在 `doc/` 目录下可以根据内容类型创建子目录

### 文件命名规范
- 使用小写字母和连字符分隔单词（如：`user-guide.md`）
- 避免使用空格和特殊字符
- 文件名应该简洁且具有描述性
- 中文文档可以使用中文命名，但建议使用英文

### 推荐的文档目录结构
```
project-root/
├── README.md                    # 项目主要说明文档（唯一允许在根目录的.md文件）
└── doc/                         # 所有其他文档
    ├── api/                     # API文档
    │   ├── api-reference.md
    │   └── authentication.md
    ├── guides/                  # 用户指南
    │   ├── installation.md
    │   ├── quick-start.md
    │   └── troubleshooting.md
    ├── development/             # 开发文档
    │   ├── contributing.md
    │   ├── coding-standards.md
    │   └── testing.md
    ├── design/                  # 设计文档
    │   ├── architecture.md
    │   ├── database-schema.md
    │   └── ui-design.md
    └── project-info/            # 项目信息
        ├── changelog.md
        ├── roadmap.md
        └── license.md
```

### 文档类型分类
- **README.md**：项目概述、快速开始、基本使用说明
- **用户文档**：安装指南、使用手册、FAQ等
- **开发文档**：贡献指南、代码规范、API文档等
- **设计文档**：架构设计、数据库设计、UI设计等
- **项目管理**：变更日志、路线图、发布说明等

## 文件结构建议

### 文档开头
- 每个文档应以一级标题开始
- 可选择性地添加文档描述或摘要
- 对于长文档，建议添加目录

### 文档结尾
- 可以添加相关链接或参考资料
- 包含最后更新时间（可选）

## 最佳实践

1. **一致性**：在整个文档中保持格式一致
2. **可读性**：使用适当的空行和缩进提高可读性
3. **语义化**：标题应该反映内容的层次结构
4. **简洁性**：避免过度使用格式化，保持内容简洁
5. **可维护性**：使用清晰的文件命名和目录结构
6. **文档组织**：
   - 保持根目录整洁，只保留README.md
   - 将所有其他文档放在doc/目录下
   - 按文档类型和用途创建合理的子目录结构
   - 使用描述性的文件名，便于查找和理解

## 检查清单

在提交Markdown文件前，请确认：

- [ ] 标题层级正确且有意义
- [ ] 代码块包含语言标识符
- [ ] 链接和图片有适当的描述文本
- [ ] 列表格式一致
- [ ] 表格格式正确
- [ ] 文档结构清晰
- [ ] 没有拼写错误
- [ ] 符合项目的命名约定
- [ ] **文件组织正确**：除README.md外的所有.md文件都放在doc/目录下
- [ ] **文件命名规范**：使用小写字母和连字符，避免空格和特殊字符
- [ ] **目录结构合理**：文档按类型组织在适当的子目录中

## 工具推荐

建议使用以下工具来维护Markdown质量：
- Markdownlint：语法检查
- Prettier：格式化工具
- 在线Markdown编辑器进行预览

遵循这些规范将确保项目中的所有Markdown文档保持高质量和一致性。
